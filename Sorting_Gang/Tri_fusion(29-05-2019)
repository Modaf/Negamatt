#include <iostream>
#include <vector>

std::vector<int> Fusion(std::vector<int> tableau1,std::vector<int> tableau2)
{
	std::vector<int> tableau{};
	
	auto j = tableau2.begin();
	auto i = tableau1.begin();

	for(;i != tableau1.end();i++)
	{
		for(; j != tableau2.end();j++)
		{
			if((*j) >= (*i))
			{
				break;
			}
		tableau.push_back(*j);
		}
		tableau.push_back(*i);
	}
	if(j!=tableau2.end())
	{
		for(;j!=tableau2.end();j++)
		{
			tableau.push_back(*j);
		}
	}
	return tableau;
}

std::vector<int> Merge_sort_dispersion(std::vector<int> tableau,int indice_debut,int indice_fin)
{
	if(indice_debut >= indice_fin)
	{
		std::vector<int> new_tab{};
		new_tab.push_back(tableau[indice_debut]);
		return new_tab;
	}
	else
	{
		int milieu = (int)((indice_debut+indice_fin)/2);
	return Fusion(Merge_sort_dispersion(tableau,indice_debut,milieu),Merge_sort_dispersion(tableau,milieu+1,indice_fin));
	}
}

std::vector<int> Merge_sort(std::vector<int> tableau)
{
	int taille = tableau.size();
	
	
	return Fusion(Merge_sort_dispersion(tableau,0,(int)taille/2),Merge_sort_dispersion(tableau,((int)taille/2)+1,taille-1));
}


int main()
{
    std::vector<int> tableau{18,15,4,21,12,42,58,13,45,67,21,1,231,43,32,454,65,65,19};
	tableau = Merge_sort(tableau);
	
	for(int i : tableau)
	{
		std::cout << i <<' ';
	}
		
}

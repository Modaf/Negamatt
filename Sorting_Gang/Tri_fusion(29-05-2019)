#include <iostream>
#include <vector>

std::vector<int> Fusion(std::vector<int> tableau1,std::vector<int> tableau2)
{
	
	// int j = 0;
	// for(auto i = tableau1.begin(); i != tableau1.end();i++)
	// {
		// for(j;j<tableau2.size();j++)
		// {
			// if(tableau2[j] > (*i))
			// {
				// break;
			// }
			// tableau1.insert(i,j);
		// }
	// }
	tableau1.insert(tableau1.end(),tableau2.begin(),tableau2.end());
	return tableau1;
}

std::vector<int> Merge_sort_dispersion(std::vector<int> tableau,int indice_debut,int indice_fin)
{
	if(indice_debut >= indice_fin)
	{
		std::vector<int> new_tab{};
		tableau.push_back(tableau[indice_debut]);
		return new_tab;
	}
	else
	{
		int milieu = (int)((indice_debut+indice_fin)/2);
	
	std::cout<< indice_debut  <<" "<< indice_fin << std::endl;
		
	std::cout << "\nTableau 1 : ";
		for(auto i=indice_debut; i <= milieu;i++)
		{
			std::cout << tableau[i] <<' ';
		}
		std::cout <<std::endl;
		
	std::cout << "Tableau 2 : ";
		for(auto i=milieu+1; i <= indice_fin;i++)
		{
			std::cout << tableau[i] <<' ';
		}
		std::cout << std::endl;
		
		return Fusion(Merge_sort_dispersion(tableau,indice_debut,milieu),Merge_sort_dispersion(tableau,milieu+1,indice_fin));
	}
}

std::vector<int> Merge_sort(std::vector<int> tableau)
{
	int taille = tableau.size();
	
	
	return Fusion(Merge_sort_dispersion(tableau,0,(int)taille/2),Merge_sort_dispersion(tableau,((int)taille/2)+1,taille-1));
}


int main()
{
    std::vector<int> tableau{18,15,4,21,12,42,58,13,45,67,21,1,231,43,32,454,65,65,19};
	tableau = Merge_sort(tableau);
	tableau.push_back(5);
	
	for(int i : tableau)
	{
		std::cout << i <<' ';
	}

    return 0;
	
}
